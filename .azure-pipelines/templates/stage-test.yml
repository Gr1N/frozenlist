parameters:
  pythonVersions: []
  operatingSystems:
    - 'Linux'
    - 'Windows'
    - 'Mac'
  variants:
    - 'Cython'
    - 'Pure'
  # This version is a prerelease version and is marked
  # as possibly failing, either because the version might
  # not be available on Azure yet or because tests are
  # allowed to fail on this version.
  pyMayFail: '3.8'

stages:
- stage: test
  displayName: 'Run tests'

  jobs:
  - job:

    strategy:
      matrix:
        ${{ each py in parameters.pythonVersions }}:
          ${{ each os in parameters.operatingSystems }}:
            ${{ each variant in parameters.variants }}:
              ${{ if or(eq(os, 'Linux'), eq(variant, 'Cython')) }}:
                ${{ format('Py{0} {1} {2}', py, os, variant) }}:
                  python.version: ${{ py }}
                  no_extensions: ${{ eq(variant, 'Pure') }}
                  ${{ if eq(os, 'Linux') }}:
                    image: 'ubuntu-latest'
                  ${{ if eq(os, 'Windows') }}:
                    image: 'windows-latest'
                  ${{ if eq(os, 'Mac') }}:
                    image: 'macos-latest'

    pool:
      vmImage: '$(image)'

    timeoutInMinutes: 10

    steps:
    - checkout: self
      clean: true

    - task: UsePythonVersion@0
      ${{ if eq(py, parameters.pyMayFail) }}:
        continueOnError: true
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: |
        python -m pip install --upgrade pip setuptools
      condition: and(succeeded(), variables['UsePythonVersion.pythonLocation'])
      displayName: 'Update pip'

    - script: |
        make cythonize
      condition: and(variables['no_extensions'], succeeded(), variables['UsePythonVersion.pythonLocation'])
      displayName: 'Cythonize'

    - script: |
        pip install -r requirements/dev.txt pytest-azurepipelines
      env:
        ${{ if no_extensions }}:
          FROZENLIST_NO_EXTENSIONS: 'Y'
      condition: and(succeeded(), variables['UsePythonVersion.pythonLocation'])
      displayName: 'Install dependencies'


    - script: |
        pytest tests -vv --no-coverage-upload
      condition: and(succeeded(), variables['UsePythonVersion.pythonLocation'])
      displayName: 'pytest'

    - script: |
        python -m coverage xml
      displayName: 'Prepare coverage'
      condition: and(succeeded(), variables['UsePythonVersion.pythonLocation'])

    - script: |
        pip install codecov
        python -m codecov -f coverage.xml -X gcov
      env:
        CODECOV_TOKEN: $(codecov.token)
      condition: and(variables['codecov.token'], succeeded(), variables['UsePythonVersion.pythonLocation'])
      displayName: 'Upload coverage reports'

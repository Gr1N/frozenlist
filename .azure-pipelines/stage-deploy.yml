parameters:
  pythonVersions: []
  operatingSystems:
    - 'Linux'
    - 'Windows'
    - 'Mac'

stages:
- stage: build
  displayName: 'Build'

  jobs:
  - job: tarball
    displayName: 'Tarball'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - template: templates/step-build.yml@templates
        parameters:
          steps:
            - script: |
                make cythonize
              displayName: 'Cythonize'
            - script: |
                python setup.py sdist
              displayName: 'Make tarball'

  - job: manylinux
    displayName: 'Linux wheels'
    strategy:
      matrix:
        ${{ each py in parameters.pythonVersions }}:
          ${{ format('Py{0} Linux x64', py) }}:
            python.version: ${{ py }}
            manylinux: 'manylinux_64'
    pool:
      vmImage: 'ubuntu-latest'
    container: manylinux
    steps:
      - checkout: self
        clean: true

      - bash: |
          # "3.7" -> "37", "3.10" -> "310"
          PYV=`echo "$PYTHON_VERSION" | cut -b1,3-`
          PYCODE="cp${PYV}-cp${PYV}"
          # attach a build variant flag if needed
          if [ -d "/opt/python/${PYCODE}m" ]; then
            PYCODE="${PYCODE}m"
          fi
          echo "##vso[task.setvariable variable=python.code;]$PYCODE"
          echo "##[section]Set python.code to $PYCODE"
        displayName: 'Set python.code from $(python.version)'

      - script: |
          /opt/python/$(python.code)/bin/python -m venv .build-venv
        displayName: 'Create virtualenv'

      - script: |
          source .build-venv/bin/activate
          pip install -U setuptools wheel
        displayName: 'Install tools'

      - script: |
          source .build-venv/bin/activate
          make cythonize
          python setup.py bdist_wheel
        displayName: 'Make wheel'

      - script: |
          auditwheel repair dist/*.whl --wheel-dir wheelhouse/
        displayName: 'Repair wheel'

      - template: templates/step-store-dist.yml@templates
        parameters:
          folder: wheelhouse

  - job:
    displayName: 'non-Linux wheels'
    strategy:
      matrix:
        ${{ each py in parameters.pythonVersions }}:
          ${{ if ne(py, parameters.pyMayFail) }}:
            ${{ each os in parameters.operatingSystems }}:
              ${{ if ne(os, 'Linux') }}:
                ${{ format('Py{0} {1} x64', py, os) }}:
                  python.version: ${{ py }}
                  python.architecture: 'x64'
                  ${{ if eq(os, 'Windows') }}:
                    image: 'windows-latest' 
                  ${{ if eq(os, 'Mac') }}:
                    image: 'macos-latest'
              # For Windows, add in a i686 32-bit build too
              ${{ if eq(os, 'Windows') }}:
                ${{ format('Py{0} {1} x86', py, os) }}:
                  python.version: ${{ py }}
                  python.architecture: 'x86'
                  image: 'windows-latest'
    pool:
      vmImage: '$(image)'
    steps:
      - template: templates/step-build.yml@templates
        parameters:
          python: '$(python.version)'
          architecture: '$(python.architecture)'
          steps:
            - script: |
                make cythonize
                python setup.py bdist_wheel
              displayName: 'Make wheel'
